# Variables
$owner = "yourGitHubUsername" # Replace with your GitHub username or organization name
$repo = "yourRepoName" # Replace with your repository name
$token = "yourPersonalAccessToken" # Replace with your GitHub personal access token
$labelToRemove = "merge-conflict"

# Base64 encode the GitHub Personal Access Token
$base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$token"))

# Function to get all open PRs
function Get-OpenPRs {
    $prApiUrl = "https://api.github.com/repos/$owner/$repo/pulls?state=open"
    $headers = @{
        Authorization = "Basic $base64AuthInfo"
        "User-Agent" = "PowerShell Script"
    }

    $prs = Invoke-RestMethod -Uri $prApiUrl -Method Get -Headers $headers
    return $prs
}

# Function to remove a label
function Remove-Label {
    param (
        $prNumber
    )
    $labelApiUrl = "https://api.github.com/repos/$owner/$repo/issues/$prNumber/labels/$labelToRemove"
    $headers = @{
        Authorization = "Basic $base64AuthInfo"
        "User-Agent" = "PowerShell Script"
    }

    try {
        Invoke-RestMethod -Uri $labelApiUrl -Method Delete -Headers $headers
        Write-Host "Label '$labelToRemove' successfully removed from PR #$prNumber."
    } catch {
        Write-Error "Failed to remove label from PR #$prNumber. Error: $_"
    }
}

# Main script logic
$openPRs = Get-OpenPRs

foreach ($pr in $openPRs) {
    if ($pr.mergeable -eq $true -and $pr.labels.name -contains $labelToRemove) {
        Write-Host "PR #$($pr.number) is mergeable. Attempting to remove
