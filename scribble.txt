#################################################################
param (
    [Parameter (Mandatory=$false)]
    [object] $WebhookData
)
# if ($WebhookData)
# {

    # # Get the data object from WebhookData
    # $WebhookBody = (ConvertFrom-Json -InputObject $WebhookData.RequestBody)
    # Write-Output $WebhookBody
    # Write-Output $WebhookData
    # Write-Output $WebhookBody.data
    # # Get the info needed to identify the VM (depends on the payload schema)
    # $schemaId = $WebhookBody.schemaId
    # Write-Output "schemaId: $schemaId"
    # if ($schemaId -eq "azureMonitorCommonAlertSchema") {
    #     $Essentials = [object] ($WebhookBody.data).essentials
    #     # Get the first target only as this script doesn't handle multiple
    #     $alertTargetIdArray = (($Essentials.alertTargetIds)[0]).Split("/")
    #     $SubId = ($alertTargetIdArray)[2]
    #     $ResourceGroupName = ($alertTargetIdArray)[4]
    #     $ResourceType = ($alertTargetIdArray)[6] + "/" + ($alertTargetIdArray)[7]
    #     $ResourceName = ($alertTargetIdArray)[-1]
    #     $status = $Essentials.monitorCondition
    # }
    
    $ResourceType = ""
    $ResourceName = ""
    $ResourceGroupName = ""
    $SubId = ""
    Write-Output "resourceType: $ResourceType"
    Write-Output "resourceName: $ResourceName"
    Write-Output "resourceGroupName: $ResourceGroupName"
    Write-Output "subscriptionId: $SubId"

    #region Authenticate to NFCU-HUB-AutomationAccount Managed Identity
    Disable-AzContextAutosave -Scope Process

    # Connect to Azure with system-assigned managed identity
    $AzureContext = (Connect-AzAccount -Identity).context
    $AzureContext = Set-AzContext -SubscriptionName $AzureContext.Subscription -DefaultProfile $AzureContext
    Select-AzSubscription -SubscriptionId $SubId

    $resourceGroupName = $ResourceGroupName
    $vmName = $ResourceName
    # Get the VM object
    $vm = Get-AzVM -ResourceGroupName $resourceGroupName -VMName $vmName
    $dataDiskName = $null
    $dataDiskSize = $null
    # Loop through the data disks attached to the VM
    foreach ($dataDisk in $vm.StorageProfile.DataDisks) {
        Write-Output "Data Disk Name: $($dataDisk.Name)"
        Write-Output "Data Disk Current Size (GB): $($dataDisk.DiskSizeGB)"
        Write-Output "Data Disk Lun: $($dataDisk.Lun)"
        Write-Output "----------------------"
        $dataDiskName = $($dataDisk.Name)
        $currentdisksize = $($dataDisk.DiskSizeGB)
    }

    #Allowed Disk size values
    $AllowDiskSize = @(32, 64, 128, 256, 512, 1024, 2048, 4096)

    #SMTP server name
    $smtpServer = "swvdcrvcompas01.nfcu.net"

    #Creating a Mail object
    $msg = new-object Net.Mail.MailMessage
    #Email structure Network Operations
    $msg.From = "noreply@navyfederal.org"
    $msg.To.Add("rohini.vemulapati@navyfederal.org")
    #$msg.From = "CNE_Service@navyfederal.org"
    #$msg.To.Add("ISD_Cloud_IaC@navyfederal.org")

    # Get the disk details
    $disk = Get-AzDisk -ResourceGroupName $resourceGroupName -DiskName $dataDiskName

    # Initialize a variable to store the result
    $NewDiskSizeGB = $null

    # Loop through the array
    foreach ($diskSize in $AllowDiskSize) {
        if ($diskSize -gt $currentdisksize) {
            # The first number greater than the input is found
            $NewDiskSizeGB = $diskSize
            break
        }
    }

    if($NewDiskSizeGB -eq $null){
        throw "Exceeded maximum disk size"
    }
    #Increase the disk size
    Write-Output "Increasing disk size to: $NewDiskSizeGB GB"
    $disk.DiskSizeGB = $NewDiskSizeGB
    

    # Update the disk size
    #New-AzDiskUpdateConfig -DiskSizeGB $NewDiskSizeGB | Update-AzDisk -ResourceGroupName $resourceGroupName -DiskName $dataDiskName

$scriptContent = '#!/bin/bash' + "`n" + 
'exec &> /tmp/log.txt' + "`n" + 
'echo "Initiating rescan..."' + "`n" + 
'sudo umount /mnt' + "`n" + 
'echo 1 | sudo tee /sys/class/block/sdc/device/rescan > /dev/null' + "`n" + 
'sudo partprobe /dev/sdc' + "`n" + 
'dmesg | tail' + "`n" + 
'echo "Rescan completed."' + "`n" + 
'echo "Listing block devices..."' + "`n" + 
'lsblk' + "`n" + 
'echo "Checking disk using fdisk..."' + "`n" + 
'sudo fdisk -l /dev/sdc' + "`n" + 
'echo "Starting partition resize..."' + "`n" + 
'sudo growpart /dev/sdc 1' + "`n" + 
'echo "Partition resized."' + "`n" + 
'echo "Resizing filesystem..."' + "`n" + 
'sudo resize2fs /dev/sdc1' + "`n" + 
'echo "Remounting filesystem..."' + "`n" + 
'sudo mount /dev/sdc1 /mnt' + "`n" + 
'echo "Filesystem resize completed."'

    # Invoke the script on the VM
    Invoke-AzVMRunCommand -ResourceGroupName $ResourceGroupName -Name $vmName -CommandId 'RunShellScript' -ScriptString $scriptContent

    # Remove the temporary script file
    Remove-Item -Path $scriptContent

    Write-Output "Disk size increased successfully."

    # email alerts
    Write-Output "Sending Email"

    # #Creating a Mail object
    # $msg = new-object Net.Mail.MailMessage

    #Creating SMTP server object
    $smtp = new-object Net.Mail.SmtpClient($smtpServer)

    $msg.subject = "Azure VM Data disk of $DiskName increased by New Disk size ($NewDiskSizeGB)GB in Subscription $SubscriptionId"
    $msg.IsBodyHtml = $true
    $msg.body += "Hi,<br/>"
    $msg.body += "<br/>"
    $msg.body += "Azure VM Data disk of $DiskName has current disk size as ($currentdisksize)GB and increased by New Disk size ($NewDiskSizeGB)GB in Subscription $SubscriptionId<br/>"
    $msg.body += "<br/>", "<br/>"
    $msg.body += "Please DO NOT RESPOND to this email. This mailbox is NOT actively checked. Questions or concerns can be addressed to ISD_Cloud_IaC@navyfederal.org <br/>"
    $msg.body += "<br/>", "<br/>"
            
    #Sending email 
    $smtp.Send($msg)

    # Log the end of the Runbook
    Write-Output "ReSize Azure VM Disk Runbook completed."
#}
