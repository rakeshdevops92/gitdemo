trigger:
- main

parameters:
- name: environment
  displayName: 'Select Environment'
  type: string
  values:
  - dev
  - test
  - plab
  - hf
  - prod
  default: dev

- name: clusterRegion
  displayName: 'Select Cluster Region'
  type: string
  values:
  - useast2
  - uswest2
  default: useast2

variables:
  - name: configuration
    value: |
      {
        "dev": {
          "useast2": {
            "serviceConnection": "devUseast2ServiceConnection",
            "resourceGroupName": "devUseast2ResourceGroup",
            "clusterName": "devUseast2Cluster",
            "namespace": "devUseast2Namespace"
          },
          "uswest2": {
            "serviceConnection": "devUswest2ServiceConnection",
            "resourceGroupName": "devUswest2ResourceGroup",
            "clusterName": "devUswest2Cluster",
            "namespace": "devUswest2Namespace"
          }
        },
        "test": {
          "useast2": {
            "serviceConnection": "testUseast2ServiceConnection",
            "resourceGroupName": "testUseast2ResourceGroup",
            "clusterName": "testUseast2Cluster",
            "namespace": "testUseast2Namespace"
          },
          "uswest2": {
            "serviceConnection": "testUswest2ServiceConnection",
            "resourceGroupName": "testUswest2ResourceGroup",
            "clusterName": "testUswest2Cluster",
            "namespace": "testUswest2Namespace"
          }
        },
        "plab": {
          "useast2": {
            "serviceConnection": "plabUseast2ServiceConnection",
            "resourceGroupName": "plabUseast2ResourceGroup",
            "clusterName": "plabUseast2Cluster",
            "namespace": "plabUseast2Namespace"
          },
          "uswest2": {
            "serviceConnection": "plabUswest2ServiceConnection",
            "resourceGroupName": "plabUswest2ResourceGroup",
            "clusterName": "plabUswest2Cluster",
            "namespace": "plabUswest2Namespace"
          }
        },
        "hf": {
          "useast2": {
            "serviceConnection": "hfUseast2ServiceConnection",
            "resourceGroupName": "hfUseast2ResourceGroup",
            "clusterName": "hfUseast2Cluster",
            "namespace": "hfUseast2Namespace"
          },
          "uswest2": {
            "serviceConnection": "hfUswest2ServiceConnection",
            "resourceGroupName": "hfUswest2ResourceGroup",
            "clusterName": "hfUswest2Cluster",
            "namespace": "hfUswest2Namespace"
          }
        },
        "prod": {
          "useast2": {
            "serviceConnection": "prodUseast2ServiceConnection",
            "resourceGroupName": "prodUseast2ResourceGroup",
            "clusterName": "prodUseast2Cluster",
            "namespace": "prodUseast2Namespace"
          },
          "uswest2": {
            "serviceConnection": "prodUswest2ServiceConnection",
            "resourceGroupName": "prodUswest2ResourceGroup",
            "clusterName": "prodUswest2Cluster",
            "namespace": "prodUswest2Namespace"
          }
        }
      }
  - name: environmentConfig
    value: $[ variables['configuration'][parameters['environment']][parameters['clusterRegion']] ]

steps:
- task: AzureCLI@2
  inputs:
    azureSubscription: '$(environmentConfig.serviceConnection)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Install kubelogin
      VERSION=$(curl --silent "https://api.github.com/repos/Azure/kubelogin/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
      wget https://github.com/Azure/kubelogin/releases/download/$VERSION/kubelogin-linux-amd64.zip
      unzip kubelogin-linux-amd64.zip
      sudo mv bin/linux_amd64/kubelogin /usr/local/bin/
      
      # Get credentials for AKS cluster
      az aks get-credentials --resource-group $(environmentConfig.resourceGroupName) --name $(environmentConfig.clusterName) --overwrite-existing
      
      # Now, get the list of deployments with the specified label
      DEPLOYMENTS=$(kubectl get deployments -n $(environmentConfig.namespace) -l app=myapp -o jsonpath='{.items[*].metadata.name}')

      # Loop through the deployments and restart (bounce) each one
      for DEPLOYMENT in $DEPLOYMENTS; do
        kubectl rollout restart deployment/$DEPLOYMENT -n $(environmentConfig.namespace)
      done
  displayName: 'Run AZ CLI and kubectl commands'
