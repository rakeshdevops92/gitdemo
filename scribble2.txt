# Define Variables
$token = "your-personal-access-token" # Replace with your GitHub Personal Access Token
$sourceOwner = "source-owner-name" # Replace with the source owner name
$sourceRepo = "source-repo-name" # Replace with the source repository name
$sourceBranch = "source-branch-name" # Replace with the source branch name

$destinationOwner = "destination-owner-name" # Replace with the destination owner name
$destinationRepo = "destination-repo-name" # Replace with the destination repository name
$destinationBranches = @("destination-branch-1", "destination-branch-2") # List of destination branches

# Define Headers
$headers = @{
    "Authorization" = "Bearer $token"
    "Accept" = "application/vnd.github+json; api-version=2022-11-28"
}

# Define API Url for Source Branch Protection
$apiUrlSource = "https://github.yourdomain.com/api/v3/repos/$sourceOwner/$sourceRepo/branches/$sourceBranch/protection"

# Retrieve branch protection from the source
try {
    $sourceProtectionRules = Invoke-RestMethod -Uri $apiUrlSource -Method Get -Headers $headers
    Write-Output "Retrieved branch protection rules from $sourceBranch"
}
catch {
    Write-Error "Failed to retrieve branch protection rules from $sourceBranch: $_"
    exit
}

# Prepare the payload for the destination branches (customize as needed)
$protectionPayload = @{
    required_status_checks = $sourceProtectionRules.required_status_checks
    enforce_admins = $sourceProtectionRules.enforce_admins.enabled
    required_pull_request_reviews = @{
        required_approving_review_count = $sourceProtectionRules.required_pull_request_reviews.required_approving_review_count
    }
    restrictions = $null
} | ConvertTo-Json

# Apply protection rules to each destination branch
foreach ($branch in $destinationBranches) {
    $apiUrlDestination = "https://github.yourdomain.com/api/v3/repos/$destinationOwner/$destinationRepo/branches/$branch/protection"
    try {
        Invoke-RestMethod -Uri $apiUrlDestination -Method Put -Headers $headers -Body $protectionPayload -ContentType "application/json"
        Write-Output "Applied branch protection rules to $branch"
    }
    catch {
        Write-Error "Failed to apply branch protection rules to $branch: $_"
    }
}
