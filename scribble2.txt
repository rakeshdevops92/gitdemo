
# Retrieve branch protection from the source
try {
    $sourceProtectionRules = Invoke-RestMethod -Uri $apiUrlSource -Method Get -Headers $headers
    Write-Output "Retrieved branch protection rules from $sourceBranch"
}
catch {
    Write-Error "Failed to retrieve branch protection rules from $sourceBranch: $_"
    exit
}

# Transform the retrieved rules to match the expected payload schema
$transformedProtectionRules = @{
    required_status_checks = @{
        strict   = $sourceProtectionRules.required_status_checks.strict
        contexts = $sourceProtectionRules.required_status_checks.contexts
    }
    enforce_admins = $sourceProtectionRules.enforce_admins.enabled
    required_pull_request_reviews = @{
        dismiss_stale_reviews = $sourceProtectionRules.required_pull_request_reviews.dismiss_stale_reviews
        require_code_owner_reviews = $sourceProtectionRules.required_pull_request_reviews.require_code_owner_reviews
        required_approving_review_count = $sourceProtectionRules.required_pull_request_reviews.required_approving_review_count
    }
    restrictions = @{
        users = $sourceProtectionRules.restrictions.users
        teams = $sourceProtectionRules.restrictions.teams
    }
    # Add any other rules that you need to transform based on the source rules
} | ConvertTo-Json -Depth 5

# API URL for updating branch protection on the destination
$apiUrlDestination = "https://github.azc.ext.hp.com/api/v3/repos/$destinationOwner/$destinationRepo/branches/$destinationBranch/protection"

# Apply protection rules to the destination branch
try {
    $response = Invoke-RestMethod -Uri $apiUrlDestination -Method Put -Headers $headers -Body $transformedProtectionRules -ContentType "application/json"
    Write-Output "Applied branch protection rules to $destinationBranch in $destinationRepo"
}
catch {
    Write-Error "Failed to apply branch protection rules to $destinationBranch in $destinationRepo: $_"
}
