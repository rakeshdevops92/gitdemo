parameters:
  - name: nugetName
    type: string
    default: "HP.PenControl"
    values:
      - "HP.PenControl"
      - "HP.AccessoryControl"
      - "HP.AppFramework.AuthService"
      - "HP.AppFramework.LoggingDE"
      - "HP.AppFramework.Win32DE"
      - "HP.AudioControl"
      - "HP.Calculator"
      - "HP.CameraStatus"

jobs:
  - job: BuildNuGet
    displayName: "Build Selected NuGet Package"
    timeoutInMinutes: 250
    steps:
      - checkout: self
        fetchDepth: 100
        clean: true

      - task: PowerShell@2
        displayName: "Set NuGet Details Dynamically"
        inputs:
          targetType: inline
          script: |
            $nugetMappings = @{
              "HP.PenControl"              = @{ Path="nugets/HP.PenControl"; Solution="HP.PenControl.sln"; Assembly="Properties/AssemblyInfo.cs" }
              "HP.AccessoryControl"        = @{ Path="nugets/HP.AccessoryControl"; Solution="HP.AccessoryControl.sln"; Assembly="Properties/AssemblyInfo.cs" }
              "HP.AppFramework.AuthService"= @{ Path="nugets/HP.AppFramework.AuthService"; Solution="HP.AppFramework.AuthService.sln"; Assembly="Properties/AssemblyInfo.cs" }
              "HP.AppFramework.LoggingDE"  = @{ Path="nugets/HP.AppFramework.LoggingDE"; Solution="HP.AppFramework.LoggingDE.sln"; Assembly="Properties/AssemblyInfo.cs" }
              "HP.AppFramework.Win32DE"    = @{ Path="nugets/HP.AppFramework.Win32DE"; Solution="HP.AppFramework.Win32DE.sln"; Assembly="Properties/AssemblyInfo.cs" }
              "HP.AudioControl"            = @{ Path="nugets/HP.AudioControl"; Solution="HP.AudioControl.sln"; Assembly="Properties/AssemblyInfo.cs" }
              "HP.Calculator"              = @{ Path="nugets/HP.Calculator"; Solution="HP.Calculator.sln"; Assembly="Properties/AssemblyInfo.cs" }
              "HP.CameraStatus"            = @{ Path="nugets/HP.CameraStatus"; Solution="HP.CameraStatus.sln"; Assembly="Properties/AssemblyInfo.cs" }
            }

            $selectedNuget = "${{ parameters.nugetName }}"
            $details = $nugetMappings[$selectedNuget]
            
            Write-Host "##vso[task.setvariable variable=nugetPath]$($details.Path)"
            Write-Host "##vso[task.setvariable variable=solutionFile]$($details.Solution)"
            Write-Host "##vso[task.setvariable variable=assemblyFile]$($details.Assembly)"
            Write-Host "Selected NuGet: $selectedNuget"
            Write-Host "Path: $($details.Path)"
            Write-Host "Solution File: $($details.Solution)"
            Write-Host "Assembly File: $($details.Assembly)"

      - script: |
          echo "Building NuGet Project: ${{ parameters.nugetName }}"
          echo "Path: $(nugetPath)"
          echo "Solution File: $(solutionFile)"
          echo "Assembly File: $(assemblyFile)"
        displayName: "Show Selected NuGet Info"

      targetType: 'inline'
      workingDirectory: $(Build.Repository.LocalPath)/$(nugetPath)/${{ parameters.nugetName }}
      script: |
        # Define paths dynamically based on selected nugetName
        $AssemblyFile = "$(Build.Repository.LocalPath)\$(nugetPath)\${{ parameters.nugetName }}\Properties\AssemblyInfo.cs"
        $DesktopCsproj = "$(Build.Repository.LocalPath)\apps\HPX\windows\DesktopExtension\DesktopExtension.csproj"
        $HpxCsproj = "$(Build.Repository.LocalPath)\apps\HPX\windows\HP.HPX\HP.HPX.csproj"
        $NewVersion = "$(PackageVersion)"
        $NugetName = "${{ parameters.nugetName }}"
      
        # Files to check
        $FilesToCheck = @($AssemblyFile, $DesktopCsproj, $HpxCsproj)
      
        foreach ($file in $FilesToCheck) {
            if (-Not (Test-Path $file)) {
                Write-Host "Error: File not found: $file"
                exit 1
            }
        }
      
        # Update Assembly Version and File Version
        (Get-Content $AssemblyFile) -replace '\[assembly: AssemblyVersion\(".*"\)\]', "[assembly: AssemblyVersion(`"$NewVersion`")]" | Set-Content $AssemblyFile
        (Get-Content $AssemblyFile) -replace '\[assembly: AssemblyFileVersion\(".*"\)\]', "[assembly: AssemblyFileVersion(`"$NewVersion`")]" | Set-Content $AssemblyFile
        Write-Host "Successfully updated AssemblyVersion and AssemblyFileVersion in $AssemblyFile"
      
        # Update DesktopExtension.csproj References
        (Get-Content $DesktopCsproj) -replace "($NugetName.*?, Version=)[0-9\.]+", "`$1$NewVersion" `
                                    -replace "(HintPath.*?$NugetName\\.*?\\).*?(\")", "`$1$NewVersion`$2" | Set-Content $DesktopCsproj
        Write-Host "Successfully updated $NugetName references in $DesktopCsproj"
      
        # Update HP.HPX.csproj Content References
        (Get-Content $HpxCsproj) -replace "(<Content Include=\".*?$NugetName\\.*?\\).*?(\")", "`$1$NewVersion`$2" | Set-Content $HpxCsproj
        Write-Host "Successfully updated $NugetName content references in $HpxCsproj"
      
        # Log file contents post update
        Write-Host "Contents of AssemblyInfo.cs post update:"
        Get-Content $AssemblyFile | ForEach-Object { Write-Host $_ }
      
        Write-Host "Contents of DesktopExtension.csproj post update:"
        Get-Content $DesktopCsproj | ForEach-Object { Write-Host $_ }
      
        Write-Host "Contents of HP.HPX.csproj post update:"
        Get-Content $HpxCsproj | ForEach-Object { Write-Host $_ }


      - task: NuGetCommand@2
        displayName: "Restore NuGet Packages"
        inputs:
          command: restore
          restoreSolution: "$(Build.SourcesDirectory)\$(nugetPath)\$(solutionFile)"

      - task: VSBuild@1
        displayName: "Build Solution"
        inputs:
          solution: "$(Build.SourcesDirectory)\$(nugetPath)\$(solutionFile)"
          platform: "Any CPU"
          configuration: "Release"

      - task: PowerShell@2
        displayName: "Pack NuGet Package"
        inputs:
          targetType: inline
          script: |
            nuget pack "$(Build.SourcesDirectory)\$(nugetPath)\$(solutionFile)" -Properties Configuration=Release
            Write-Host "NuGet Package Packed for ${{ parameters.nugetName }}"

      - task: PowerShell@2
        displayName: "Push NuGet Package"
        inputs:
          targetType: inline
          script: |
            nuget push "$(Build.SourcesDirectory)\$(nugetPath)\*.nupkg" -Source "YourNuGetFeedURL" -ApiKey "YourNuGetApiKey"
            Write-Host "NuGet Package Pushed for ${{ parameters.nugetName }}"
